cbuild-run:
  generated-by: csolution version 2.11.0
  solution: ../CubeMX.csolution.yml
  target-type: STM32F217IGHx
  compiler: AC6
  device: STMicroelectronics::STM32F217IGHx
  device-pack: Keil::STM32F2xx_DFP@3.0.0
  output:
    - file: CubeMX/STM32F217IGHx/Debug/CubeMX.axf
      info: generate by CubeMX.Debug+STM32F217IGHx
      type: elf
      load: image+symbols
  system-resources:
    memory:
      - name: Flash
        access: rx
        start: 0x08000000
        size: 0x00100000
        from-pack: Keil::STM32F2xx_DFP@3.0.0
      - name: SRAM
        access: rwx
        start: 0x20000000
        size: 0x00020000
        from-pack: Keil::STM32F2xx_DFP@3.0.0
  system-descriptions:
    - file: ${CMSIS_PACK_ROOT}/Keil/STM32F2xx_DFP/3.0.0/CMSIS/SVD/STM32F217.svd
      type: svd
  debugger:
    name: CMSIS-DAP@pyOCD
    protocol: swd
    clock: 10000000
    dbgconf: ../.cmsis/CubeMX+STM32F217IGHx.dbgconf
    gdbserver:
      - port: 3333
  debug-vars:
    vars: |
      __var DbgMCU_CR      = 0x00000007;   // DBGMCU_CR: DBG_SLEEP, DBG_STOP, DBG_STANDBY
      __var DbgMCU_APB1_Fz = 0x00000000;   // DGBMCU_APB1_FZ: All Peripherals Operate as in Normal Mode
      __var DbgMCU_APB2_Fz = 0x00000000;   // DGBMCU_APB2_FZ: All Peripherals Operate as in Normal Mode
      __var TraceClk_Pin   = 0x00040002;   // PE2
      __var TraceD0_Pin    = 0x00040003;   // PE3
      __var TraceD1_Pin    = 0x00040004;   // PE4
      __var TraceD2_Pin    = 0x00040005;   // PE5
      __var TraceD3_Pin    = 0x00040006;   // PE6
  debug-sequences:
    - name: DebugDeviceUnlock
      blocks:
        - execute: |
            Sequence("CheckID");
    - name: DebugCoreStart
      blocks:
        - execute: |
            // Replication of Standard Functionality
            Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
        - info: DbgMCU registers
          execute: |
            Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
            Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
            Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB2_FZ: Configure APB2 Peripheral Freeze Behavior
    - name: TraceStart
      blocks:
        - execute: |
            __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
            __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
        - if: traceSWO
          execute: |
            Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
        - if: traceTPIU
          execute: |
            Sequence("EnableTraceTPIU");                                          // Call TPIU Trace Setup
    - name: TraceStop
      blocks:
        - execute: |
            // Nothing required for SWO Trace
            __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
            __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
        - if: traceSWO
          execute: |
            Sequence("DisableTraceSWO");
        - if: traceTPIU
          execute: |
            Sequence("DisableTraceTPIU");
    - name: CheckID
      blocks:
        - execute: |
            __var pidr1 = 0;
            __var pidr2 = 0;
            __var jep106id = 0;
            __var ROMTableBase = 0;

            __ap = 0;      // AHB-AP

            ROMTableBase = ReadAP(0xF8) & ~0x3;

            pidr1 = Read32(ROMTableBase + 0x0FE4);
            pidr2 = Read32(ROMTableBase + 0x0FE8);
            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
        - if: jep106id != 0x20
          execute: |
            Query(0, "Not a genuine ST Device! Abort connection", 1);
            Message(2, "Not a genuine ST Device! Abort connection.");
    - name: EnableTraceSWO
      blocks:
        - execute: |
            __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
            __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value

            dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
            dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous

            Sequence("ConfigureTraceSWOPin");
        - info: configure Trace I/O Enable + Trace Mode Asynchronous
          execute: |
            Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
    - name: DisableTraceSWO
      blocks:
        - execute: |
            __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
        - info: unconfigure Trace I/O Enable + Trace Mode Asynchronous
          execute: |
            dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
            Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
    - name: EnableTraceTPIU
      blocks:
        - execute: |
            __var width            = (__traceout & 0x003F0000) >> 16;
            __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
            __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value

            dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup

            Sequence("ConfigureTraceTPIUPins");
        - info: TPIU port width 1
          if: width >= 1
          execute: |
            dbgmcu_trace_val  = (3 << 5);
        - info: TPIU port width 2
          if: width >= 2
          execute: |
            dbgmcu_trace_val  = (5 << 5);
        - info: TPIU port width 4
          if: width >= 4
          execute: |
            dbgmcu_trace_val  = (7 << 5);
        - info: configure Trace I/O Enable + Trace Mode Asynchronous
          execute: |
            Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
    - name: DisableTraceTPIU
      blocks:
        - execute: |
            __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
        - info: unconfigure Trace I/O Enable + Trace Mode Synchronous
          execute: |
            dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
            Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
    - name: ConfigureTraceSWOPin
      blocks:
        - execute: |
            __var pin     = 0;
            __var port    = 0;
            __var portAdr = 0;
            __var pos     = 0;

            __var SWO_Pin = 0x00010003;          // PB3
        - info: configure SWO
          execute: |
            pin     =               ((SWO_Pin            ) & 0x0000FFFF);
            port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
            portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);

            pos = pin * 2;
            Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
            Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
            Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
            Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
        - if: pin <  8
          execute: |
            pos = ((pin    ) & 7) * 4;
            Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
        - if: pin >= 8
          execute: |
            pos = ((pin - 8) & 7) * 4;
            Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
    - name: ConfigureTraceTPIUPins
      blocks:
        - execute: |
            __var pin     = 8;
            __var port    = 0;
            __var portAdr = 0;
            __var pos     = 0;

            __var width   = (__traceout & 0x003F0000) >> 16;
        - info: configure TRACECLK
          execute: |
            pin     =                (TraceClk_Pin            ) & 0x0000FFFF;
            port    =                (TraceClk_Pin >> 16) & 0x0000FFFF;
            portAdr = 0x40020000 + (((TraceClk_Pin >> 16) & 0x0000FFFF) * 0x400);

            pos = pin * 2;
            Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
            Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
            Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
            Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
        - if: pin <  8
          execute: |
            pos = ((pin    ) & 7) * 4;
            Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
        - if: pin >= 8
          execute: |
            pos = ((pin - 8) & 7) * 4;
            Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
        - info: TPIU port width 1
          if: width >= 1
          blocks:
            - info: configure TRACED0
              execute: |
                pin     =                (TraceD0_Pin            ) & 0x0000FFFF;
                port    =                (TraceD0_Pin >> 16) & 0x0000FFFF;
                portAdr = 0x40020000 + (((TraceD0_Pin >> 16) & 0x0000FFFF) * 0x400);

                pos = pin * 2;
                Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
                Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
                Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
                Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
            - if: pin <  8
              execute: |
                pos = ((pin    ) & 7) * 4;
                Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
            - if: pin >= 8
              execute: |
                pos = ((pin - 8) & 7) * 4;
                Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
        - info: TPIU port width 2
          if: width >= 2
          blocks:
            - info: configure TRACED1
              execute: |
                pin     =                (TraceD1_Pin            ) & 0x0000FFFF;
                port    =                (TraceD1_Pin >> 16) & 0x0000FFFF;
                portAdr = 0x40020000 + (((TraceD1_Pin >> 16) & 0x0000FFFF) * 0x400);

                pos = pin * 2;
                Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
                Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
                Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
                Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
            - if: pin <  8
              execute: |
                pos = ((pin    ) & 7) * 4;
                Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
            - if: pin >= 8
              execute: |
                pos = ((pin - 8) & 7) * 4;
                Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
        - info: TPIU port width 4
          if: width >= 4
          blocks:
            - info: configure TRACED2
              execute: |
                pin     =                (TraceD2_Pin            ) & 0x0000FFFF;
                port    =                (TraceD2_Pin >> 16) & 0x0000FFFF;
                portAdr = 0x40020000 + (((TraceD2_Pin >> 16) & 0x0000FFFF) * 0x400);

                pos = pin * 2;
                Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
                Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
                Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
                Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
            - if: pin <  8
              execute: |
                pos = ((pin    ) & 7) * 4;
                Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
            - if: pin >= 8
              execute: |
                pos = ((pin - 8) & 7) * 4;
                Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
            - info: configure TRACED3
              execute: |
                pin     =                (TraceD3_Pin            ) & 0x0000FFFF;
                port    =                (TraceD3_Pin >> 16) & 0x0000FFFF;
                portAdr = 0x40020000 + (((TraceD3_Pin >> 16) & 0x0000FFFF) * 0x400);

                pos = pin * 2;
                Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
                Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
                Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
                Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
            - if: pin <  8
              execute: |
                pos = ((pin    ) & 7) * 4;
                Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
            - if: pin >= 8
              execute: |
                pos = ((pin - 8) & 7) * 4;
                Write32(portAdr + 0x24, ((Read32(portAdr + 0x24) & ~(15 << pos))                    ) );  // GPIOx_AFRH:    Alternate Function to AF0
  programming:
    - algorithm: ${CMSIS_PACK_ROOT}/Keil/STM32F2xx_DFP/3.0.0/CMSIS/Flash/STM32F2xx_1024.FLM
      start: 0x08000000
      size: 0x00100000
      ram-start: 0x20000000
      ram-size: 0x00020000
